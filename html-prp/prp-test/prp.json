[
    {
        "id": "10000",
        "name": "CWE606_Unchecked_Loop_Condition__wchar_t_listen_socket_34",
        "release_time": null,
        "change_time": null,
        "language": "c",
        "confidentiality": null,
        "integrity": null,
        "availability": null,
        "privileges_required": null,
        "authentication": null,
        "danger": null,
        "vulnerability_type": null,
        "threat_type": null,
        "source": "SARD",
        "attack_vector": null,
        "attack_complexity": null,
        "access_vector": null,
        "access_complexity": null,
        "UI": null,
        "description": null,
        "code": "z/*TEMPLATE GENERATED TESTCASE FILE\r\n\nFilename: CWE606_Unchecked_Loop_Condition__wchar_t_listen_socket_34.c\r\n\nLabel Definition File: CWE606_Unchecked_Loop_Condition.label.xml\r\n\nTemplate File: sources-sinks-34.tmpl.c\r\n\n*/\r\n\n/*\r\n\n * @description\r\n\n * CWE: 606 Unchecked Input For Loop Condition\r\n\n * BadSource: listen_socket Read data using a listen socket (server side)\r\n\n * GoodSource: Input a number less than MAX_LOOP\r\n\n * Sinks:\r\n\n *    GoodSink: Use data as the for loop variant after checking to see if it is less than MAX_LOOP\r\n\n *    BadSink : Use data as the for loop variant without checking its size\r\n\n * Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)\r\n\n *\r\n\n * */\r\n\n\r\n\n#include \"std_testcase.h\"\r\n\n\r\n\n#define MAX_LOOP 10000\r\n\n\r\n\n#ifndef _WIN32\r\n\n#include <wchar.h>\r\n\n#endif\r\n\n\r\n\n#ifdef _WIN32\r\n\n#include <winsock2.h>\r\n\n#include <windows.h>\r\n\n#include <direct.h>\r\n\n#pragma comment(lib, \"ws2_32\") /* include ws2_32.lib when linking */\r\n\n#define CLOSE_SOCKET closesocket\r\n\n#else\r\n\n#include <sys/types.h>\r\n\n#include <sys/socket.h>\r\n\n#include <netinet/in.h>\r\n\n#include <arpa/inet.h>\r\n\n#include <unistd.h>\r\n\n#define INVALID_SOCKET -1\r\n\n#define SOCKET_ERROR -1\r\n\n#define CLOSE_SOCKET close\r\n\n#define SOCKET int\r\n\n#endif\r\n\n\r\n\n#define TCP_PORT 27015\r\n\n#define LISTEN_BACKLOG 5\r\n\n\r\n\ntypedef union\r\n\n{\r\n\n    wchar_t * unionFirst;\r\n\n    wchar_t * unionSecond;\r\n\n} CWE606_Unchecked_Loop_Condition__wchar_t_listen_socket_34_unionType;\r\n\n\r\n\n#ifndef OMITBAD\r\n\n\r\n\nvoid CWE606_Unchecked_Loop_Condition__wchar_t_listen_socket_34_bad()\r\n\n{\r\n\n    wchar_t * data;\r\n\n    CWE606_Unchecked_Loop_Condition__wchar_t_listen_socket_34_unionType myUnion;\r\n\n    wchar_t dataBuffer[100] = L\"\";\r\n\n    data = dataBuffer;\r\n\n    {\r\n\n#ifdef _WIN32\r\n\n        WSADATA wsaData;\r\n\n        int wsaDataInit = 0;\r\n\n#endif\r\n\n        int recvResult;\r\n\n        struct sockaddr_in service;\r\n\n        wchar_t *replace;\r\n\n        SOCKET listenSocket = INVALID_SOCKET;\r\n\n        SOCKET acceptSocket = INVALID_SOCKET;\r\n\n        size_t dataLen = wcslen(data);\r\n\n        do\r\n\n        {\r\n\n#ifdef _WIN32\r\n\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\r\n\n            {\r\n\n                break;\r\n\n            }\r\n\n            wsaDataInit = 1;\r\n\n#endif\r\n\n            /* POTENTIAL FLAW: Read data using a listen socket */\r\n\n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\r\n\n            if (listenSocket == INVALID_SOCKET)\r\n\n            {\r\n\n                break;\r\n\n            }\r\n\n            memset(&service, 0, sizeof(service));\r\n\n            service.sin_family = AF_INET;\r\n\n            service.sin_addr.s_addr = INADDR_ANY;\r\n\n            service.sin_port = htons(TCP_PORT);\r\n\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\r\n\n            {\r\n\n                break;\r\n\n            }\r\n\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\r\n\n            {\r\n\n                break;\r\n\n            }\r\n\n            acceptSocket = accept(listenSocket, NULL, NULL);\r\n\n            if (acceptSocket == SOCKET_ERROR)\r\n\n            {\r\n\n                break;\r\n\n            }\r\n\n            /* Abort on error or the connection was closed */\r\n\n            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);\r\n\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\r\n\n            {\r\n\n                break;\r\n\n            }\r\n\n            /* Append null terminator */\r\n\n            data[dataLen + recvResult / sizeof(wchar_t)] = L'\\0';\r\n\n            /* Eliminate CRLF */\r\n\n            replace = wcschr(data, L'\\r');\r\n\n            if (replace)\r\n\n            {\r\n\n                *replace = L'\\0';\r\n\n            }\r\n\n            replace = wcschr(data, L'\\n');\r\n\n            if (replace)\r\n\n            {\r\n\n                *replace = L'\\0';\r\n\n            }\r\n\n        }\r\n\n        while (0);\r\n\n        if (listenSocket != INVALID_SOCKET)\r\n\n        {\r\n\n            CLOSE_SOCKET(listenSocket);\r\n\n        }\r\n\n        if (acceptSocket != INVALID_SOCKET)\r\n\n        {\r\n\n            CLOSE_SOCKET(acceptSocket);\r\n\n        }\r\n\n#ifdef _WIN32\r\n\n        if (wsaDataInit)\r\n\n        {\r\n\n            WSACleanup();\r\n\n        }\r\n\n#endif\r\n\n    }\r\n\n    myUnion.unionFirst = data;\r\n\n    {\r\n\n        wchar_t * data = myUnion.unionSecond;\r\n\n        {\r\n\n            int i, n, intVariable;\r\n\n            if (swscanf(data, L\"%d\", &n) == 1)\r\n\n            {\r\n\n                /* POTENTIAL FLAW: user-supplied value 'n' could lead to very large loop iteration */\r\n\n                intVariable = 0;\r\n\n                for (i = 0; i < n; i++)\r\n\n                {\r\n\n                    /* INCIDENTAL: CWE 561: Dead Code - non-avoidable if n <= 0 */\r\n\n                    intVariable++; /* avoid a dead/empty code block issue */\r\n\n                }\r\n\n                printIntLine(intVariable);\r\n\n            }\r\n\n        }\r\n\n    }\r\n\n}\r\n\n\r\n\n#endif /* OMITBAD */\r\n\n\r\n\n#ifndef OMITGOOD\r\n\n\r\n\n/* goodG2B() uses the GoodSource with the BadSink */\r\n\nstatic void goodG2B()\r\n\n{\r\n\n    wchar_t * data;\r\n\n    CWE606_Unchecked_Loop_Condition__wchar_t_listen_socket_34_unionType myUnion;\r\n\n    wchar_t dataBuffer[100] = L\"\";\r\n\n    data = dataBuffer;\r\n\n    /* FIX: Set data to a number less than MAX_LOOP */\r\n\n    wcscpy(data, L\"15\");\r\n\n    myUnion.unionFirst = data;\r\n\n    {\r\n\n        wchar_t * data = myUnion.unionSecond;\r\n\n        {\r\n\n            int i, n, intVariable;\r\n\n            if (swscanf(data, L\"%d\", &n) == 1)\r\n\n            {\r\n\n                /* POTENTIAL FLAW: user-supplied value 'n' could lead to very large loop iteration */\r\n\n                intVariable = 0;\r\n\n                for (i = 0; i < n; i++)\r\n\n                {\r\n\n                    /* INCIDENTAL: CWE 561: Dead Code - non-avoidable if n <= 0 */\r\n\n                    intVariable++; /* avoid a dead/empty code block issue */\r\n\n                }\r\n\n                printIntLine(intVariable);\r\n\n            }\r\n\n        }\r\n\n    }\r\n\n}\r\n\n\r\n\n/* goodB2G() uses the BadSource with the GoodSink */\r\n\nstatic void goodB2G()\r\n\n{\r\n\n    wchar_t * data;\r\n\n    CWE606_Unchecked_Loop_Condition__wchar_t_listen_socket_34_unionType myUnion;\r\n\n    wchar_t dataBuffer[100] = L\"\";\r\n\n    data = dataBuffer;\r\n\n    {\r\n\n#ifdef _WIN32\r\n\n        WSADATA wsaData;\r\n\n        int wsaDataInit = 0;\r\n\n#endif\r\n\n        int recvResult;\r\n\n        struct sockaddr_in service;\r\n\n        wchar_t *replace;\r\n\n        SOCKET listenSocket = INVALID_SOCKET;\r\n\n        SOCKET acceptSocket = INVALID_SOCKET;\r\n\n        size_t dataLen = wcslen(data);\r\n\n        do\r\n\n        {\r\n\n#ifdef _WIN32\r\n\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\r\n\n            {\r\n\n                break;\r\n\n            }\r\n\n            wsaDataInit = 1;\r\n\n#endif\r\n\n            /* POTENTIAL FLAW: Read data using a listen socket */\r\n\n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\r\n\n            if (listenSocket == INVALID_SOCKET)\r\n\n            {\r\n\n                break;\r\n\n            }\r\n\n            memset(&service, 0, sizeof(service));\r\n\n            service.sin_family = AF_INET;\r\n\n            service.sin_addr.s_addr = INADDR_ANY;\r\n\n            service.sin_port = htons(TCP_PORT);\r\n\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\r\n\n            {\r\n\n                break;\r\n\n            }\r\n\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\r\n\n            {\r\n\n                break;\r\n\n            }\r\n\n            acceptSocket = accept(listenSocket, NULL, NULL);\r\n\n            if (acceptSocket == SOCKET_ERROR)\r\n\n            {\r\n\n                break;\r\n\n            }\r\n\n            /* Abort on error or the connection was closed */\r\n\n            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);\r\n\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\r\n\n            {\r\n\n                break;\r\n\n            }\r\n\n            /* Append null terminator */\r\n\n            data[dataLen + recvResult / sizeof(wchar_t)] = L'\\0';\r\n\n            /* Eliminate CRLF */\r\n\n            replace = wcschr(data, L'\\r');\r\n\n            if (replace)\r\n\n            {\r\n\n                *replace = L'\\0';\r\n\n            }\r\n\n            replace = wcschr(data, L'\\n');\r\n\n            if (replace)\r\n\n            {\r\n\n                *replace = L'\\0';\r\n\n            }\r\n\n        }\r\n\n        while (0);\r\n\n        if (listenSocket != INVALID_SOCKET)\r\n\n        {\r\n\n            CLOSE_SOCKET(listenSocket);\r\n\n        }\r\n\n        if (acceptSocket != INVALID_SOCKET)\r\n\n        {\r\n\n            CLOSE_SOCKET(acceptSocket);\r\n\n        }\r\n\n#ifdef _WIN32\r\n\n        if (wsaDataInit)\r\n\n        {\r\n\n            WSACleanup();\r\n\n        }\r\n\n#endif\r\n\n    }\r\n\n    myUnion.unionFirst = data;\r\n\n    {\r\n\n        wchar_t * data = myUnion.unionSecond;\r\n\n        {\r\n\n            int i, n, intVariable;\r\n\n            if (swscanf(data, L\"%d\", &n) == 1)\r\n\n            {\r\n\n                /* FIX: limit loop iteration counts */\r\n\n                if (n < MAX_LOOP)\r\n\n                {\r\n\n                    intVariable = 0;\r\n\n                    for (i = 0; i < n; i++)\r\n\n                    {\r\n\n                        /* INCIDENTAL: CWE 561: Dead Code - non-avoidable if n <= 0 */\r\n\n                        intVariable++; /* avoid a dead/empty code block issue */\r\n\n                    }\r\n\n                    printIntLine(intVariable);\r\n\n                }\r\n\n            }\r\n\n        }\r\n\n    }\r\n\n}\r\n\n\r\n\nvoid CWE606_Unchecked_Loop_Condition__wchar_t_listen_socket_34_good()\r\n\n{\r\n\n    goodG2B();\r\n\n    goodB2G();\r\n\n}\r\n\n\r\n\n#endif /* OMITGOOD */\r\n\n\r\n\n/* Below is the main(). It is only used when building this testcase on\r\n\n   its own for testing or for building a binary to use in testing binary\r\n\n   analysis tools. It is not used when compiling all the testcases as one\r\n\n   application, which is how source code analysis tools are tested. */\r\n\n#ifdef INCLUDEMAIN\r\n\n\r\n\nint main(int argc, char * argv[])\r\n\n{\r\n\n    /* seed randomness */\r\n\n    srand( (unsigned)time(NULL) );\r\n\n#ifndef OMITGOOD\r\n\n    printLine(\"Calling good()...\");\r\n\n    CWE606_Unchecked_Loop_Condition__wchar_t_listen_socket_34_good();\r\n\n    printLine(\"Finished good()\");\r\n\n#endif /* OMITGOOD */\r\n\n#ifndef OMITBAD\r\n\n    printLine(\"Calling bad()...\");\r\n\n    CWE606_Unchecked_Loop_Condition__wchar_t_listen_socket_34_bad();\r\n\n    printLine(\"Finished bad()\");\r\n\n#endif /* OMITBAD */\r\n\n    return 0;\r\n\n}\r\n\n\r\n\n#endif\r\n\n",
        "POC": null,
        "patch_code": null,
        "announcement": null,
        "patch": null,
        "CWE_id": "CWE606"
    }
]